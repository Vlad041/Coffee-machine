crd = ['1 3', '2 3', '3 3', '1 2', '2 2', '3 2', '1 1', '2 1', '3 1']
inp = list('_' * 9)
wins = 0
result = False
turns = []


def field(val):
    print('-' * 9)
    for i in range(0, 9, 3):
        print('| ' + '{} {} {}'.format(val[i], val[i+1], val[i+2]).replace('_', ' ') + ' |')
    print('-' * 9)


def win(con):
    global wins
    global result
    win_con = [[con[i], con[i+1], con[i+2]] for i in range(0, 9, 3)] \
                + [[con[i], con[i+3], con[i+6]] for i in range(0, 3, 1)]\
                + [[con[0], con[4], con[8]], [con[2], con[4], con[6]]]

    for i in win_con:
        if (set(i) == {'X'} or set(i) == {'O'}) and wins == 1:
            result = 'Impossible'
        elif set(i) == {'X'}:
            result = 'X wins'
            wins = 1
        elif set(i) == {'O'}:
            result = 'O wins'
            wins = 1

    if result is False:
        try:
            inp.index('_')
            pass
        except:
            result = 'Draw'
    print(result)


def input_coordinates():
    while True:
        x, y = [int(i) for i in input('Enter the coordinates:').split(' ')]
        if 1 <= x < 4 and 1 <= y < 4:
            return x, y
        else:
            print('Coordinates should be from 1 to 3!')


while True:
    field(inp)
    x, y = input_coordinates()
    move = "{} {}".format(x, y)
    position = [p for p, x in enumerate(crd) if x == move]
    int_pos = int("".join([str(p) for p in position]))

    if inp[int_pos] == '0' or inp[int_pos] == 'X':
        print('This cell is occupied! Choose another one!')
        continue
    elif inp[int_pos] == '_':
        if turns.count('O') >= turns.count('X') or turns.count('X') == 0:
            inp[int_pos] = 'X'
            turns.append('X')
        else:
            inp[int_pos] = 'O'
            turns.append('O')
        field(inp)
        win(inp)
    if result:
        break
